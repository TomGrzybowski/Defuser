{"mappings":"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","sources":["src/javascript/myGame.js"],"sourcesContent":["'use strict';\nconst game = document.querySelector('.defuser__game'); //this is the main gameplay window\nconst inputs = document.querySelectorAll('input');\nlet rows = Number(document.querySelector('#defuser__rows').value); //check for input how many rows\nlet cols = Number(document.querySelector('#defuser__cols').value); //check for input how many cols\nlet bombsAmount = Number(document.querySelector('#defuser__bombs').value); //check for input how many cols\nconst selectRows = document.querySelectorAll('.defuser__row'); //selects all created rows\nconst playButton = document.querySelector('#defuser__play'); //Select PLAY button\nconst hiders = document.querySelectorAll('.unrevealed');\nconst cellsObj = {}; //This object will hold all cell coordinates and value true if it is revealed. It will be used to asses win condition\nconst backdrop = document.querySelector('.backdrop');\nconst victoryScreen = document.querySelector('.victory');\nconst defeatScreen = document.querySelector('.defeat');\nconst closeBtn = document.querySelector('.close-btn');\n\nlet won = false;\nlet bombsLeft = bombsAmount;\n\ngame.addEventListener('click', hideHider);\ngame.addEventListener('contextmenu', flager);\ncloseBtn.addEventListener('click', closeModal);\n\ninputs.forEach(input => {\n  //add event listeners to inputs\n  input.addEventListener('change', handleUpdate);\n});\n\nplayButton.addEventListener('click', setup); //add event listener to play button\n\nfunction hideHider(e) {\n  const hiderBox = e.target;\n  if (hiderBox.classList[0] === 'unrevealed') {\n    //execute only if the hider is clicked\n    hiderBox.classList.add('is-hidden');\n\n    const selectedCell = hiderBox.parentElement;\n\n    if (isBomb(selectedCell)) {\n      //Execute only if lost\n      lost(selectedCell);\n      return;\n    }\n\n    const selectedCol = Number(selectedCell.classList[1].split('-')[1]); //find column nr\n    const selectedRow = Number(\n      selectedCell.closest('.defuser__row').classList[1].split('-')[1]\n    );\n    cellsObj[`cell-${selectedRow}-${selectedCol}`] = true;\n\n    if (selectedCell.textContent === '') {\n      revealNearEmpty(selectedCell);\n    }\n\n    if (checkWinCondition()) {\n      win();\n    }\n  }\n}\n\nfunction closeModal() {\n  backdrop.classList.add('is-hidden');\n  victoryScreen.classList.add('is-hidden');\n  defeatScreen.classList.add('is-hidden');\n\n  if (!won) {\n    setup();\n  }\n  if (won) {\n    won = false;\n  }\n}\n//This function reveals everything around empty cells\nfunction revealNearEmpty(selectedCell) {\n  const emptyCol = Number(selectedCell.classList[1].split('-')[1]); //find column nr\n  const emptyRow = Number(\n    selectedCell.closest('.defuser__row').classList[1].split('-')[1]\n  );\n\n  for (let i = emptyRow - 1; i <= emptyRow + 1; i++) {\n    if (i < 1 || i > rows) continue; //exclude places out of playing field\n    for (let j = emptyCol - 1; j <= emptyCol + 1; j++) {\n      if (j < 1 || j > cols) continue; //exclude places out of playing field\n      if (j === emptyCol && i === emptyRow) continue; //exclude central cell\n      const currentCell = document.querySelector(`.row-${i} > .col-${j}`);\n      let currentCellContent = currentCell.childNodes[0].textContent;\n\n      cellsObj[`cell-${i}-${j}`] = true;\n      if (!currentCell.childNodes[1].classList.contains('is-hidden')) {\n        currentCell.childNodes[1].classList.add('is-hidden');\n      } else {\n        continue;\n      }\n\n      if (currentCellContent === '') {\n        revealNearEmpty(currentCell);\n      }\n    }\n  }\n}\n\nfunction checkWinCondition() {\n  const areTrue = Object.values(cellsObj).every(value => value === true);\n  return areTrue;\n}\n\n//Execute if player lost (stepped on a bomb)\nfunction lost(selectedCell) {\n  selectedCell.style.backgroundColor = 'red';\n\n  backdrop.classList.remove('is-hidden');\n  defeatScreen.classList.remove('is-hidden');\n}\n\n//Execute if player won (discovered all non-bomb tiles)\nfunction win() {\n  won = true;\n  backdrop.classList.remove('is-hidden');\n  victoryScreen.classList.remove('is-hidden');\n}\n\n//Helper function to check if the selected cell contains a bomb\nfunction isBomb(selectedCell) {\n  if (\n    selectedCell.firstChild.firstChild &&\n    Number(selectedCell.textContent) < 1\n  ) {\n    //Execute only if lost\n    return true;\n  }\n  return false;\n}\n\n//Adds flag with a right click\nfunction flager(e) {\n  const hiderBox = e.target;\n  e.preventDefault();\n\n  if (hiderBox.classList[0] === 'unrevealed') {\n    //execute only if the hider is clicked\n    const svg = document.createElement('i');\n    svg.classList.add('fa-solid');\n    svg.classList.add('fa-flag');\n    hiderBox.append(svg);\n    bombsLeft -= 1;\n    updateBombsLeft();\n  } else if (hiderBox.classList[1] === 'fa-question') {\n    e.preventDefault();\n    hiderBox.parentElement.innerHTML = '';\n  } else if (hiderBox.classList[1] === 'fa-flag') {\n    e.preventDefault();\n    hiderBox.classList.add('fa-question');\n    hiderBox.classList.remove('fa-flag');\n    bombsLeft += 1;\n    updateBombsLeft();\n  }\n}\n\nfunction updateBombsLeft() {\n  const counter = document.querySelector('.defuser__bomb_counter_span');\n\n  if (bombsLeft > 0) {\n    counter.textContent = bombsLeft;\n  } else {\n    counter.textContent = 0;\n  }\n}\n\nfunction handleUpdate() {\n  rows = document.querySelector('#defuser__rows').value;\n  cols = document.querySelector('#defuser__cols').value;\n  bombsAmount = document.querySelector('#defuser__bombs').value;\n}\n\nfunction createGrid() {\n  const headerRow = document.createElement('div');\n  headerRow.classList.add('defuser__header');\n\n  const bombCounter = document.createElement('p');\n  bombCounter.classList.add('defuser__bomb_counter');\n  bombCounter.textContent = `Bombs left: `;\n\n  const bombCounterSpan = document.createElement('span');\n  bombCounterSpan.classList.add('defuser__bomb_counter_span');\n  bombCounterSpan.textContent = `${bombsLeft}`;\n\n  bombCounter.append(bombCounterSpan);\n  headerRow.append(bombCounter);\n\n  game.append(headerRow);\n  for (let i = 1; i <= rows; i++) {\n    // Create rows loop\n    const rowDiv = document.createElement('div');\n    rowDiv.classList.add('defuser__row'); //add universal class\n    rowDiv.classList.add('row-' + i); //add numered class\n    game.append(rowDiv);\n\n    for (let ii = 1; ii <= cols; ii++) {\n      //Create cells within rows\n      const cellDiv = document.createElement('div');\n      cellDiv.classList.add('defuser__cell'); //add universal class\n      cellDiv.classList.add('col-' + ii); //add numered class\n      cellsObj[`cell-${i}-${ii}`] = false;\n\n      rowDiv.append(cellDiv); //create the cell\n\n      const span = document.createElement('span'); //create a content element\n      span.classList.add('defuser__cell_content'); //add universal class\n\n      cellDiv.append(span);\n\n      const hiderDiv = document.createElement('div'); //create a hider\n      hiderDiv.classList.add('unrevealed'); //add universal class\n\n      cellDiv.append(hiderDiv); //add hidder\n    }\n  }\n}\n\nfunction insertBombs() {\n  const bombs = new Set();\n\n  while (bombs.size < bombsAmount) {\n    let rowNr = Math.floor(Math.random() * rows) + 1;\n    let colNr = Math.floor(Math.random() * cols) + 1;\n    bombs.add(`${rowNr} - ${colNr}`);\n    delete cellsObj[`cell-${rowNr}-${colNr}`];\n  }\n\n  bombsLeft = bombs.size;\n  updateBombsLeft();\n\n  bombs.forEach(el => {\n    //Adds a bomb to each randomized bomb location\n    const svg = document.createElement('i');\n\n    svg.classList.add('fa-solid');\n    svg.classList.add('fa-bomb');\n\n    const arr = el.split(' - ');\n    const row = document.querySelector('.row-' + arr[0]);\n    const col = row.querySelector('.col-' + arr[1]);\n\n    col.firstChild.append(svg);\n  });\n}\n\n// a subfunction for inserting numbers into the grid\nfunction iterateNearBombs(bombRow, bombCol) {\n  for (let i = bombRow - 1; i <= bombRow + 1; i++) {\n    if (i < 1 || i > rows) continue; //exclude places out of playing field\n    for (let j = bombCol - 1; j <= bombCol + 1; j++) {\n      if (j < 1 || j > cols) continue; //exclude places out of playing field\n      if (j === bombCol && i === bombRow) continue;\n      const currentCell = document.querySelector(`.row-${i} > .col-${j}`);\n      let currentCellContent = currentCell.childNodes[0].textContent;\n\n      if (isBomb(currentCell)) continue;\n      if (currentCellContent === '') {\n        currentCell.childNodes[0].textContent = 1;\n      } else {\n        currentCell.childNodes[0].textContent = String(\n          Number(currentCell.childNodes[0].textContent) + 1\n        );\n      }\n    }\n  }\n}\n\n//A function that inserts into each cell value showing how many bombs are in near proximity\nfunction numbersSetup() {\n  const cells = document.querySelectorAll('.defuser__cell');\n\n  cells.forEach(el => {\n    if (isBomb(el)) {\n      const bombCol = Number(el.classList[1].split('-')[1]); //find bomb column nr\n      const bombRow = Number(\n        el.closest('.defuser__row').classList[1].split('-')[1]\n      ); // find bomb row nr\n      iterateNearBombs(bombRow, bombCol);\n    }\n  });\n}\n\nfunction checkSettings() {\n  const rowsLimit = Number(document.querySelector('#defuser__rows').max);\n  const colsLimit = Number(document.querySelector('#defuser__cols').max);\n  const bombsAmountLimit = Number(\n    document.querySelector('#defuser__bombs').max\n  );\n\n  if (bombsAmount > rows * cols - 1) {\n    return true;\n  }\n\n  if (rows > rowsLimit || cols > colsLimit || bombsAmount > bombsAmountLimit) {\n    return true;\n  }\n  if (0 > rows || 0 > cols || 0 > bombsAmount) {\n    return true;\n  }\n\n  return false;\n}\n\n//Sets up the playing field\nfunction setup() {\n  game.innerHTML = ''; // clear content\n\n  checkSettings();\n  if (checkSettings()) {\n    alert(\n      'Current settings do not allow to setup a game. Please Try adjusting the board size or amount of bombs.'\n    );\n    game.textContent =\n      'Current settings do not allow to setup a game. Please Try adjusting the board size or amount of bombs.';\n    return;\n  }\n  createGrid();\n  insertBombs();\n  numbersSetup();\n}\n\nsetup();\n"],"names":["game","document","querySelector","inputs","querySelectorAll","rows","Number","value","cols","bombsAmount","selectRows","playButton","hiders","cellsObj","backdrop","victoryScreen","defeatScreen","closeBtn","won","bombsLeft","hideHider","e","hiderBox","target","classList","add","selectedCell","parentElement","isBomb","lost","selectedCol","split","selectedRow","closest","concat","textContent","revealNearEmpty","checkWinCondition","win","closeModal","setup","emptyCol","emptyRow","i","j","currentCell","currentCellContent","childNodes","contains","Object","values","every","style","backgroundColor","remove","firstChild","flager","preventDefault","svg","createElement","append","updateBombsLeft","innerHTML","counter","handleUpdate","createGrid","headerRow","bombCounter","bombCounterSpan","rowDiv","ii","cellDiv","span","hiderDiv","insertBombs","bombs","Set","size","rowNr","Math","floor","random","colNr","forEach","el","arr","iterateNearBombs","bombRow","bombCol","String","numbersSetup","checkSettings","rowsLimit","max","colsLimit","bombsAmountLimit","alert","addEventListener","input"],"version":3,"file":"index.7a85b0ef.js.map"}